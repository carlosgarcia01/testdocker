{"version":3,"sources":["../../../src/connection/octave/clasificatorsOperations.js"],"names":["runProcess","Classifiers","fact","result","out","newResult","response","text","resultType","idResultType","split","Promise","resolve","reject","clientEA","clasificador","err","res","clientEP","clientDFT","clientEHM","clientDCL","clientPKS","Error","data","DifferentialClassifiers","clientDFTvsDCL","clientEAvsDCL","clientEAvsDFT","clientEPvsPKS","RunClassifier","results","newResults","contPatologias","cont","includes","push"],"mappings":"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","sourcesContent":["import { isError } from 'util';\nimport starProcess from './runProcess';\n/* Imports clients classifiers */\nimport clientDCL from '../clasificadores/client_clasificador_DCL';\nimport clientDFT from '../clasificadores/client_clasificador_DFT';\nimport clientEA from '../clasificadores/client_clasificador_EA';\nimport clientEHM from '../clasificadores/client_clasificador_EHM';\nimport clientPKS from '../clasificadores/client_clasificador_Parkinsionismos';\nimport clientEP from '../clasificadores/client_clasificador_Parkinson';\n\n/* Imports clients diferential classifiers */\nimport clientDFTvsDCL from '../clasificadores_diferenciales/client_clasificador_diferencial_DFT_vs_DCL';\nimport clientEAvsDCL from '../clasificadores_diferenciales/client_clasificador_diferencial_EA_vs_DCL';\nimport clientEAvsDFT from '../clasificadores_diferenciales/client_clasificador_diferencial_EA_vs_DFT';\nimport clientEPvsPKS from '../clasificadores_diferenciales/client_clasificador_diferencial_EP_vs_PKS';\n\nlet runProcess = null;\n\nasync function Classifiers(fact) {\n  let result = 'Hubo un problema';\n  let out;\n  let newResult;\n  let response;\n  const text = fact.result;\n  const [, resultType] = fact.idResultType.split('oct');\n  try {\n    switch (fact.idResultType) {\n      case 'oct2':\n        response = new Promise((resolve, reject) => {\n          clientEA.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      case 'oct3':\n        response = new Promise((resolve, reject) => {\n          clientEP.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      case 'oct5':\n        response = new Promise((resolve, reject) => {\n          clientDFT.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      case 'oct8':\n        response = new Promise((resolve, reject) => {\n          clientEHM.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      case 'oct9':\n        response = new Promise((resolve, reject) => {\n          clientDCL.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      case 'oct10':\n        response = new Promise((resolve, reject) => {\n          clientPKS.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      default:\n        out = null;\n        break;\n    }\n    if (response) out = await response;\n    else throw new Error('There was no answer');\n  } catch (err) {\n    return err;\n  }\n  if (out) {\n    newResult = {\n      result: out.data,\n      idResultType: resultType,\n    };\n  }\n  if (newResult) result = newResult;\n  return result;\n}\n\nasync function DifferentialClassifiers(fact) {\n  let out;\n  let result = 'Hubo un problema';\n  let newResult;\n  let response;\n  const text = fact.result;\n  const [, resultType] = fact.idResultType.split('oct');\n  try {\n    switch (fact.idResultType) {\n      case 'oct59':\n      case 'oct95':\n        response = new Promise((resolve, reject) => {\n          clientDFTvsDCL.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      case 'oct29':\n      case 'oct92':\n        response = new Promise((resolve, reject) => {\n          clientEAvsDCL.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      case 'oct25':\n      case 'oct52':\n        response = new Promise((resolve, reject) => {\n          clientEAvsDFT.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      case 'oct310':\n      case 'oct103':\n        response = new Promise((resolve, reject) => {\n          clientEPvsPKS.clasificador({ text }, (err, res) => {\n            if (res) resolve(res);\n            else reject(err);\n          });\n        });\n        break;\n      default:\n        out = null;\n        break;\n    }\n    if (response) out = await response;\n    else throw new Error('There was no answer');\n  } catch (err) {\n    return err;\n  }\n  if (out) {\n    newResult = {\n      result: out.data,\n      idResultType: resultType,\n    };\n  }\n  if (newResult) result = newResult;\n  return result;\n}\n\nasync function RunClassifier(results) {\n  let result;\n  const newResults = [...results];\n  let contPatologias = 0;\n  let cont = 0;\n  if (!runProcess) runProcess = starProcess();\n  for await (let fact of results) {\n    if (cont <= 1) {\n      if (['oct2', 'oct3', 'oct5', 'oct8', 'oct9', 'oct10'].includes(fact.idResultType)) {\n        result = await Classifiers(fact);\n        if (!['Hubo un problema', 'Category not found', '1.000000', null].includes(result.result))\n          contPatologias++;\n        cont++;\n      }\n    } else if (contPatologias >= 2) result = await DifferentialClassifiers(fact);\n    if (!['Hubo un problema', 'Category not found', null].includes(result.result) || !isError(result.result) )\n      newResults.push(result);\n    result = null;\n  }\n  return newResults;\n}\n\nexport default RunClassifier;\n"],"file":"clasificatorsOperations.js"}