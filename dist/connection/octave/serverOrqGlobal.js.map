{"version":3,"sources":["../../../src/connection/octave/serverOrqGlobal.js"],"names":["dotenv","config","path","join","__dirname","PROTO_PATH","ORQUESTADOR_URL","process","env","packageDef","keepCase","longs","String","enums","defaults","oneofs","grpcObject","grpc","loadPackageDefinition","orqGlobalPackage","server","Server","connectOctave","call","callback","out","response","Promise","resolve","reject","client","octave","request","err","res","results","length","forEach","fact","index","includes","idResultType","aux","result","diagnosticResult","idStudy","globalResult","Error","bind","ServerCredentials","createInsecure","addService","Octave","service","start"],"mappings":"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","sourcesContent":["import grpc from 'grpc';\nimport { loadSync } from '@grpc/proto-loader';\nimport path from 'path';\nimport dotenv from 'dotenv';\nimport { isError } from 'util';\nimport RunClassifier from './clasificatorsOperations';\nimport client from './clientOctave';\n\ndotenv.config({ path: path.join(__dirname, '../../../.env') });\nconst PROTO_PATH = path.join(__dirname, '/orqGlobal.proto');\n\nconst { ORQUESTADOR_URL } = process.env;\nconst packageDef = loadSync(PROTO_PATH, {\n  keepCase: true,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true,\n});\nconst grpcObject = grpc.loadPackageDefinition(packageDef);\nconst { orqGlobalPackage } = grpcObject;\nconst server = new grpc.Server();\n\nasync function connectOctave(call, callback) {\n  try {\n    let out;\n\n    const response = new Promise((resolve, reject) => {\n      client.octave(call.request, (err, res) => {\n        if (res) resolve(res);\n        else reject(err);\n      });\n    });\n\n    if (response) {\n      out = await response;\n\n      if (out.results.length >= 2) {\n        out.results.forEach((fact, index) => {\n          if (['oct25', 'oct29', 'oct59', 'oct310'].includes(fact.idResultType) || index !== 2) {\n            const aux = out.results[index];\n            out.results[index] = out.results[2];\n            out.results[2] = aux;\n          }\n        });\n      }\n      const result = await RunClassifier(out.results);\n      if (!isError(result[out.results.length+1])) {\n        const diagnosticResult = {\n          idStudy: out.idStudy,\n          results: result,\n          globalResult: out.globalResult,\n        };\n        callback(null, diagnosticResult);\n      } else throw new Error('RunClassifiers error');\n    } else throw new Error('There was error');\n  } catch (err) {\n    callback(null, err);\n  }\n}\n\nserver.bind(ORQUESTADOR_URL, grpc.ServerCredentials.createInsecure());\nserver.addService(orqGlobalPackage.Octave.service, {\n  connectOctave,\n});\nserver.start();\n"],"file":"serverOrqGlobal.js"}