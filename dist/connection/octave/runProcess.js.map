{"version":3,"sources":["../../../src/connection/octave/runProcess.js"],"names":["runCommand","command","Promise","resolve","reject","process","stdin","end","stdout","on","data","toString","stderr","err","starProcess"],"mappings":";;;;;;;;;AAEA;;AAFA;AACA;AAEA;AACA,MAAMA,UAAU,GAAIC,OAAD,IAAa;AAC9B;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAI;AACF;AACA,YAAMC,OAAO,GAAG,0BAAM,MAAN,CAAhB,CAFE,CAGF;AACA;AACA;AACA;;AACAA,MAAAA,OAAO,CAACC,KAAR,CAAcC,GAAd,CAAkBN,OAAlB,EAPE,CAQF;;AACAI,MAAAA,OAAO,CAACG,MAAR,CAAeC,EAAf,CAAkB,MAAlB,EAA2BC,IAAD,IAAU;AAClCP,QAAAA,OAAO,CAACO,IAAI,CAACC,QAAL,EAAD,CAAP;AACD,OAFD;AAGA;;;;;;AAMA;;AACAN,MAAAA,OAAO,CAACO,MAAR,CAAeH,EAAf,CAAkB,MAAlB,EAA2BC,IAAD,IAAUN,MAAM,CAACM,IAAD,CAA1C;AACD,KApBD,CAoBE,OAAOG,GAAP,EAAY;AACZT,MAAAA,MAAM,CAACS,GAAD,CAAN,CADY,CAEZ;AACD;AACF,GAzBM,CAAP;AA0BD,CA5BD,C,CA8BA;;;AACA,MAAMC,WAAW,GAAG,MAAMd,UAA1B,C,CACA;AACA;;;eAEec,W","sourcesContent":["// llamado child_process\n// const { spawn } = require('child_process');\nimport { spawn } from 'child_process';\n// Funcion para crear consola y recibir comando a ejecutar\nconst runCommand = (command) => {\n  // voy a retornar una promesa , funcion para crear el proces\n  return new Promise((resolve, reject) => {\n    try {\n      // creo un comando sh\n      const process = spawn('bash');\n      // const process = spawn('shell');\n      // creo un objeto para guardar la respuesta\n      // const response = {};\n      // ejecutar el comando\n      process.stdin.end(command);\n      // ejectuto el comando enviado en consola y guardo la data\n      process.stdout.on('data', (data) => {\n        resolve(data.toString());\n      });\n      /*       // ejectuto el comando enviado en consola y guardo cuando haya terminado el proceso\n      process.on('close', (code) => {\n        console.log(\"ESto es el code **   \",code);\n        response.code = code;\n        resolve(response);\n      }); */\n      // guardo la data en reject si hay un error\n      process.stderr.on('data', (data) => reject(data));\n    } catch (err) {\n      reject(err);\n      // console.log(err);\n    }\n  });\n};\n\n// closure para obtener y acceder a la funcion runCpmmand\nconst starProcess = () => runCommand;\n// exporto el modulo\n// module.exports = starProcess;\n\nexport default starProcess;\n"],"file":"runProcess.js"}